from src.components.sidebar import sidebar

import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from streamlit_agraph import agraph, Node, Edge, Config

sidebar("Genii â€¢ Conversation Analysis | Bubble Chart", 'ðŸ§ž :violet[Genii] â€¢ Conversation Analysis', " ðŸ“Š Bubble")

categories = [
    "Support technique",
    "Service client",
    "Technique",
    "Support client",
    "Consultation en optimisation des processus",
    "Technologie",
    "Relation client",
    "Gestion de projets",
    "Gestion de projet",
    "Information",
    "service client",
    "Assistance technique",
    "SÃ©curitÃ© des donnÃ©es",
    "conseils en performance",
    "Information sur la double authentification",
    "CRM intÃ©gration",
    "SÃ©curitÃ©",
    "Information partenariat"
]

themes = [
    "SÃ©curitÃ© des comptes",
    "Alertes personnalisÃ©es",
    "Interface Utilisateur",
    "SÃ©curitÃ© des donnÃ©es",
    "Service client",
    "Consultation",
    "Sauvegarde",
    "Configuration alertes",
    "Support client",
    "Paiement",
    "Optimisation logiciel",
    "Facturation",
    "Gestion utilisateurs",
    "Partenariat",
    "Gestion de compte",
    "Application mobile",
    "Support technique",
    "Annulation abonnement",
    "Abonnement",
    "Bug report",
    "ProblÃ¨me technique",
    "ProblÃ¨mes techniques",
    "AmÃ©lioration produit",
    "Notifications",
    "SÃ©curitÃ© des logiciels",
    "Formation technologique",
    "Configuration compte",
    "Formation en ligne",
    "Gestion projets",
    "CompatibilitÃ© logiciel",
    "Performance logicielle",
    "Protection des donnÃ©es",
    "IntÃ©gration logiciel",
    "Migration donnÃ©es",
    "SÃ©curitÃ©",
    "ProblÃ¨me de compte",
    "IntÃ©gration logicielle",
    "DÃ©mo produit",
    "Outils de gestion",
    "Politique de retour",
    "RÃ©cupÃ©ration de donnÃ©es"
]

sub_themes = [
    "Double authentification",
    "Configuration",
    "Guide de l'Utilisateur",
    "Chiffrement",
    "Attente prolongÃ©e",
    "Annulation abonnement",
    "Optimisation processus",
    "Cloud",
    "Exemple alerte",
    "Ticket de support",
    "ProblÃ¨me de carte",
    "DÃ©veloppeurs",
    "Performances",
    "Mode de paiement",
    "CoÃ»t supplÃ©mentaire",
    "RÃ©solution de problÃ¨me",
    "Commercial",
    "Gestion des rÃ©clamations",
    "Contrat en cours",
    "CompatibilitÃ© iPhone",
    "ProblÃ¨me logiciel",
    "Frais",
    "Mise Ã  jour",
    "Application crash",
    "Application se fermant",
    "Logiciel plantage",
    "Interface utilisateur",
    "Remboursement",
    "ProblÃ¨mes de rÃ©ception",
    "AmÃ©lioration",
    "Mises Ã  jour",
    "Blockchain",
    "ParamÃ¨tres et permissions",
    "CybersÃ©curitÃ©",
    "Offre de services",
    "Services offerts",
    "Windows 10",
    "Consommation de ressources",
    "ConformitÃ© GDPR",
    "CRM",
    "Service cloud",
    "Rapports mensuels",
    "VÃ©rification en deux Ã©tapes",
    "AccÃ¨s refusÃ©",
    "Salesforce",
    "Planification",
    "Petites entreprises",
    "Remboursement logiciel",
    "Perte de fichiers",
    "Changement d'adresse de facturation"
]

categories = ['assistance', 'service client', 'configuration', 'relation client', 'support technique', 'technique', 'sÃ©curitÃ©', 'information', 'technologie', 'service', 'informatique', 'support', 'service de consultation']
themes = ['notifications', 'alertes', 'gestion des appels', 'intÃ©gration logicielle', 'gestion de compte', 'authentification', 'protection des donnÃ©es', 'migration de donnÃ©es', 'conformitÃ© gdpr', 'offres de support', 'rÃ©cupÃ©ration de donnÃ©es', 'support technique', 'mise Ã  jour d\'abonnement', 'paiement', 'feedback utilisateur', 'annulation d\'abonnement', 'dÃ©veloppeurs', 'amÃ©lioration', 'compatibilitÃ©', 'mise Ã  jour de sÃ©curitÃ©', 'support en direct', 'optimisation des performances', 'sauvegarde', 'application mobile', 'problÃ¨me logiciel', 'police de retour', 'optimisation des processus', 'demande de dÃ©mo', 'facturation', 'changement d\'adresse', 'formation en ligne', 'interface utilisateur', 'gestion des commandes', 'suivi de tickets', 'offres pour les petites entreprises', 'communication', 'formation', 'tarification', 'services', 'sÃ©curitÃ©', 'partenariat', 'problÃ¨me de compte', 'alertes personnalisÃ©es', 'configuration utilisateur', 'intÃ©gration logiciel', 'performance logicielle']
sub_themes = ['crÃ©ation compte et permissions', 'fermeture immÃ©diate de l\'application', 'support dÃ©diÃ©', 'accÃ¨s aux tickets', 'procÃ©dure d\'annulation', 'programme de partenariat', 'ajout d\'utilisateur', 'retour de produits', 'problÃ¨me de chargement', 'exemple alerte', 'conseils gÃ©nÃ©raux', 'accÃ¨s et rÃ©initialisation du mot de passe', 'adresse de facturation', 'consommation de ressources', 'accompagnement migration', 'demande de remboursement', 'support en direct', 'traitement des requÃªtes', 'vÃ©rification en deux Ã©tapes', 'niveau de support', 'planification dÃ©mo', 'double authentification', 'problÃ¨mes de rÃ©ception', 'crash Ã  l\'ouverture', 'coÃ»t', 'tÃ©lÃ©chargement de rapports', 'demande d\'assistance', 'signalement de bug', 'chiffrement avancÃ©', 'blockchain', 'guide de l\'utilisateur', 'cybersÃ©curitÃ©', 'configuration', 'installation et guide', 'crÃ©ation de projets', 'coordination interdÃ©partementale', 'intÃ©gration avec crm', 'serveur', 'interface complexe', 'compatibilitÃ© avec les iphones', 'commande endommagÃ©e', 'attente prolongÃ©e', 'procÃ©dure d\'annulation', 'mÃ©thode de paiement', 'mesures de conformitÃ©', 'problÃ¨me de chargement', 'rÃ©siliation pour manque d\'utilitÃ©', 'explication facturation mensuelle']

def preprocess_texts(texts):
    # Normalize texts by converting to lowercase and removing duplicates
    normalized_texts = list(set([text.lower() for text in texts]))
    return normalized_texts

def generate_similarity_graph(categories, themes, sub_themes, threshold=0.2):
    # Preprocess texts
    categories = preprocess_texts(categories)
    themes = preprocess_texts(themes)
    sub_themes = preprocess_texts(sub_themes)
    
    # Combine all text data
    all_texts = categories + themes + sub_themes
    all_labels = ['category'] * len(categories) + ['theme'] * len(themes) + ['sub_theme'] * len(sub_themes)
    
    # Generate TF-IDF vectors for all texts
    vectorizer = TfidfVectorizer().fit_transform(all_texts)
    vectors = vectorizer.toarray()
    
    # Calculate cosine similarity matrix
    cosine_matrix = cosine_similarity(vectors)
    
    # Create nodes and edges based on similarity
    nodes = []
    edges = []
    
    # Define sizes and colors for different node types
    size_mapping = {'category': 30, 'theme': 20, 'sub_theme': 10}
    color_mapping = {'category': '#3a365c', 'theme': '#4b3b8f', 'sub_theme': '#a19cb1'}
    
    # Add nodes
    for i, text in enumerate(all_texts):
        node_type = all_labels[i]
        nodes.append(Node(id=f"{node_type}_{text}", label=text, size=size_mapping[node_type], color=color_mapping[node_type]))
    
    # Add edges based on similarity threshold (category > theme > sub_theme)
    num_categories = len(categories)
    num_themes = len(themes)
    
    for i in range(num_categories):
        for j in range(num_categories, num_categories + num_themes):
            if cosine_matrix[i][j] > threshold:
                source = f"category_{all_texts[i]}"
                target = f"theme_{all_texts[j]}"
                edges.append(Edge(source=source, target=target))
    
    for j in range(num_categories, num_categories + num_themes):
        for k in range(num_categories + num_themes, len(all_texts)):
            if cosine_matrix[j][k] > threshold:
                source = f"theme_{all_texts[j]}"
                target = f"sub_theme_{all_texts[k]}"
                edges.append(Edge(source=source, target=target))
    
    # Configuration of the graph
    config = Config(width=750,
                    height=750,
                    directed=False,
                    physics=True,
                    hierarchical=False)
    
    # Display the graph using streamlit-agraph
    return_value = agraph(nodes=nodes, edges=edges, config=config)

generate_similarity_graph(categories, themes, sub_themes, threshold=0.2)


import pandas as pd
from sklearn.manifold import TSNE
import numpy as np
from ast import literal_eval
import streamlit as st

# Load the embeddings
datafile_path = "Reviews.csv"
df = pd.read_csv(datafile_path)

# Convert to a list of lists of floats
matrix = np.array(df.embedding.apply(literal_eval).to_list())

# Create a t-SNE model and transform the data
tsne = TSNE(n_components=2, perplexity=15, random_state=42, init='random', learning_rate=200)
vis_dims = tsne.fit_transform(matrix)
vis_dims.shape

st.write(vis_dims)